  08. session没有cookie时也可以运行: cookie被禁止，但是让用户每次访问后台的时候带上session_id: e.g. session_id当作参数每次都在访问的
      时候带上这个参数session_id: e.g. 首先登陆主页("/"),之后登陆login页面:->访问Flask内的视图函数:def login()... 得到访问过的痕迹
      session_id=1, 之后跳转主页这个时候携带参数: redirect("/?session_id=1)" 更多的是"sid=1"
      这是session保存在服务器中，但是如果session保存在URL中，关闭浏览器再打开就有问题了: cookie被禁止之后的代价
  
  09. 请求上下文&&应用上下文: 
      request context:     request, session: 程序运行到某个地点所处的环境: 前面用户的request请求或者产生的session会话内容都不同
      application context: current_app, g:   current_app: 和不同用户的不同request没有关系,但是跟整个程序一开始创建出来的app相关，
                                                          并不因为每次请求不同得到的结果不同
                                        g: 处理请求时用于临时存储的对象，每次请求都会重设这个变量
      from flask import Flask, request: 
      request被全局导入,多个用户同时访问视图函数会同时操作这个全局变量？
      不是，因为: request = threadlocal(); request实际上是线程局部变量, 每个线程操作的都是自己的线程局部变量，隔离开来的
      请求上下文是命名在全局空间的，但是在试图函数中每个人拿到的request对象都是不同的
      
  10. 请求钩子: 相当与django中的中间件: 某一个行为触发的时候会有一个连带的效果:触发另一个行为: 
      通过装饰器实现: 
      @app.before_first_request        // e.g. 数据库SQLalchemy首先建立链接
      @app.before_request              // django: process_request()
      @app.after_request(response)     // django: process_response()
      @app.teardown_request(response)  // finally
      
  11. script扩展使用: pip install Flask-Script: 起到类似django中的manager脚本的使用
      还是用app装饰器装饰试图函数,只不过再用Manager创建一个管理员类对象，run的时候也是用manager.run()
      
  12. 模板变量的使用: flask中的函数是render_templates, django是render;
        django: render(request, "index.html", {name:"python"}参数用字典) 
         flask: render_template("index.html", name="python"  赋值形式
         ** 其中name是模版中的模版变量
      Rendering is a process of filling placeholders wth actual data

  13. 自定义过滤器: 
      a. app.add_template_filter(过滤器对应的代码函数名, 模版中使用的过滤器名字)
      b. 使用装饰器@app.template_filter(模版中用的名字)装饰自定义过滤器函数
      
  14. Flask-WTF:
      如果自己写,需要用 request.form.get() 得到从页面form得到的数据: 
            if request.method == "POST":
                username = request.form.get("username")...
      wtf表单扩展: 表单抽象成类，在试图函数中操作类对象相当于操作表单，类属性相当于表单数据
      flask中form本来是不带CSRF防护的，但是wtf带: (django中表单提交只要带有请求体都有CSRF防护)
      生成CSRF token保存在cookie中需要配置SECRET_KEY生成加密令牌(保存在cookie中)
      from wtf.validators import XXX: XXX都是类，而在用的时候都要用对象
      提交按钮也有一个表单抽象: wtforms: SubmitField
      ===> 
        得到的结果是:
        1. 模版:在模版中不需要写前端类似的form标签了，只需要写模版变量
        2. 视图函数: 没有request对象传递所以不用request.form.get(..), 只用操作form对象, form.属性名 得到要的DataField
        
        试图函数定义了表单类之后，定义一个register函数作为模版表单对应的试图函数: 能通过GET, POST两种访问方式访问: 
        GET方式访问: 并没有提交表单，用户需要register.html页面，渲染提供页面
        POST方式访问: 如果数据验证通过就“success”保存进数据库; 如果不通过还是给出GET渲染的页面, 并给出errmsg
        
